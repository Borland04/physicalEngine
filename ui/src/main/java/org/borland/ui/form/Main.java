package org.borland.ui.form;

import org.borland.core.EngineCore;
import org.borland.core.model.worldcontext.ObjectWorldContext;
import org.borland.ui.WorldRenderMain;
import org.borland.ui.form.components.WorldNavigator;

import javax.swing.*;
import javax.swing.border.TitledBorder;
import java.awt.*;

public class Main {
    public static Main mainInstance;
    private EngineCore world;

    private JPanel mainPanel;
    private JPanel worldRenderPanel;
    private JPanel configPanel;
    private JList worldNavigator;
    private JButton button1;

    public static void main(String[] args) {
        JFrame frame = new JFrame("Physical engine");
        mainInstance = new Main();
        frame.setContentPane(mainInstance.mainPanel);
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.pack();

        frame.setMinimumSize(new Dimension(640, 480));
        frame.setVisible(true);
    }

    public Main() {
        world = new EngineCore();

        WorldRenderMain worldRenderer = new WorldRenderMain(world);
        worldRenderPanel.add(worldRenderer.getWorldCanvas().getCanvas());

        subscribeOnObjectContext();
    }

    private void subscribeOnObjectContext() {
        world.getWorldContext().getObjectContext().subscribe(this::updateWorldNavigator);
    }

    private void updateWorldNavigator(ObjectWorldContext objectContext) {
        String[] ids = objectContext.getObjects().stream()
                .map(object -> object.getId())
                .toArray(String[]::new);

        SwingUtilities.invokeLater(() -> worldNavigator.setListData(ids));
    }

    public EngineCore getWorld() {
        return world;
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        mainPanel = new JPanel();
        mainPanel.setLayout(new GridBagLayout());
        final JSplitPane splitPane1 = new JSplitPane();
        splitPane1.setDividerLocation(400);
        splitPane1.setDividerSize(10);
        splitPane1.setFocusable(false);
        splitPane1.setOneTouchExpandable(true);
        splitPane1.setOpaque(true);
        splitPane1.setResizeWeight(1.0);
        GridBagConstraints gbc;
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 0;
        gbc.weightx = 1.0;
        gbc.weighty = 1.0;
        gbc.fill = GridBagConstraints.BOTH;
        mainPanel.add(splitPane1, gbc);
        worldRenderPanel = new JPanel();
        worldRenderPanel.setLayout(new BorderLayout(5, 5));
        splitPane1.setLeftComponent(worldRenderPanel);
        configPanel = new JPanel();
        configPanel.setLayout(new GridBagLayout());
        splitPane1.setRightComponent(configPanel);
        final JPanel panel1 = new JPanel();
        panel1.setLayout(new BorderLayout(0, 0));
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 0;
        gbc.weightx = 1.0;
        gbc.weighty = 1.0;
        gbc.fill = GridBagConstraints.BOTH;
        gbc.insets = new Insets(5, 5, 5, 5);
        configPanel.add(panel1, gbc);
        panel1.setBorder(BorderFactory.createTitledBorder(BorderFactory.createLineBorder(Color.black), "World Navigator", TitledBorder.DEFAULT_JUSTIFICATION, TitledBorder.DEFAULT_POSITION, null, null));
        worldNavigator = new JList();
        final DefaultListModel defaultListModel1 = new DefaultListModel();
        worldNavigator.setModel(defaultListModel1);
        panel1.add(worldNavigator, BorderLayout.CENTER);
        button1 = new JButton();
        button1.setText("Button");
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 1;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        configPanel.add(button1, gbc);
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return mainPanel;
    }

}
